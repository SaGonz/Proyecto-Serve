{"version":3,"sources":["components/formulario.jsx","components/botonborrar.jsx","components/botoncompletar.jsx","components/tareas.jsx","components/completas.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","props","handleChoice","event","value","target","console","log","urgencia","setState","categoria","addTarea","_","state","fetch","valor","then","obtenerTareas","catch","err","error","fecha_creacion","handleChange","bind","handleSubmit","preventDefault","length","this","onSubmit","type","onChange","onClick","handleClick","id","name","className","defaultValue","Component","BotonBorrar","handleBorrar","e","idTarea","borrarTarea","idBorrar","callbackPadre","actualizarRoot","BotonCompletar","process","Tareas","renderTareas","listaDeTareas","map","id_tarea","titulo","id_categoria","key","format","groupTareas","Completas","tareas","fecha_finalizacion","getTareasCompletadas","respuesta","json","data","getTiempoTranscurrido","inicio","fin","finicio","moment","ffin","diff","App","getTareas","tarea","estado","document","title","to","style","textDecoration","exact","path","backgroundColor","Math","random","toString","slice","React","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.af92e473.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Formulario extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            valor: '', \n            fecha_creacion: '',\n            categoria: '',\n            error: ''\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleClick(event) {\n        event.target.value = ''\n        console.log(event.target.value)\n    }\n    handleChange(event) {\n        event.preventDefault()\n\n        if(event.target.value.length < 2) {\n            this.setState({error: 'El campo de tareas no debe estar vacío.'})\n        } else {\n            this.setState({error: ''})\n        }\n\n        if(event.target.value.length < 45) {\n            this.setState({error: ''})\n            this.setState({valor: event.target.value})  \n        } else {\n            this.setState({error: 'El título de tu tarea es demasiado largo.'})\n        }\n    }\n    handleSubmit(event) {\n        event.preventDefault()\n        this.addTarea()\n    }\n\n    handleChoice = (event) => {\n        const {value} = event.target\n        console.log('value,',value)\n        let urgencia = ''\n\n        switch(value) {\n            case 'ui':\n                    urgencia = 'urgente importante'\n                break;\n            case 'uni':\n                    urgencia = 'urgente no importante'\n                break;\n            case 'nui':\n                    urgencia = 'no urgente importante'\n                break;\n            case 'nuni':\n                    urgencia = 'no urgente no importante'\n                break;\n            default:\n                    urgencia = 'urgente importante'\n                break;\n        }\n\n        this.setState({categoria: urgencia})\n    }\n\n    addTarea = _ => {\n        const categoria = this.state.categoria\n        fetch(`http://`+process.env.REACT_APP_HOST+`:`+process.env.REACT_APP_SERVER_PORT+`/llenar?titulo=${this.state.valor}&id_categoria=${categoria}`)\n        .then(this.props.obtenerTareas())\n        .catch(err => console.error(err))\n        console.log('tarea enviada')\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" value={this.state.valor} onChange={this.handleChange} onClick={this.handleClick}/>\n                <select id=\"categoria\" name=\"urgencia\" onClick={this.handleChoice} className=\"dropdown\">\n                    <option value=\"ui\" defaultValue>urgente importante</option>\n                    <option value=\"uni\">urgente no importante</option>\n                    <option value=\"nui\">no urgente importante</option>\n                    <option value=\"nuni\">no urgente no importante</option>\n                </select>\n                <input type=\"submit\" className=\"boton-envio\" value=\"Iniciar\"/>\n                <div className=\"error\">{this.state.error}</div>\n            </form>\n        )\n    }\n}\n\nexport default Formulario","import React, { Component } from 'react'\n\nclass BotonBorrar extends Component {\n\n    handleBorrar = (e) => {\n        console.log('quieres borrar desde cliente', this.props.idTarea)\n        this.borrarTarea(this.props.idTarea)\n    }\n    borrarTarea = (idBorrar) => {\n        console.log('borrartareapeticion hit',idBorrar)\n        fetch(`http://`+process.env.REACT_APP_HOST+`:`+process.env.REACT_APP_SERVER_PORT+`/borrar?id_tarea=${idBorrar}`)\n        .then(this.callbackPadre)\n        .catch(err => console.log(err))\n    }\n    callbackPadre = _ => {\n        this.props.actualizarRoot()\n    }\n\n    render() {\n        return(\n            <button className=\"boton-borrar\" onClick={this.handleBorrar}>x</button>\n        )\n    }\n}\n\nexport default BotonBorrar;","import React, { Component } from 'react';\nimport useSound from 'use-sound';\n\nclass BotonCompletar extends Component {\n\n    handleClick = () => {\n        console.log(\"has decidido completar una tarea\",this.props.idTarea)\n        fetch(`http://${process.env.REACT_APP_HOST}:${process.env.REACT_APP_SERVER_PORT}/completar?id_tarea=${this.props.idTarea}`)\n        .then(this.callbackPadre)\n        console.log('has mandado la petición')\n        \n    }\n\n    callbackPadre = () => {\n        this.props.actualizarRoot()\n    }\n\n    render() {\n        return (\n            <input className=\"boton-completar\" type=\"checkbox\" \n            onClick={this.handleClick} onChange={this.handleChange}/>\n        )\n    }\n}\n\nexport default BotonCompletar;","import React, { Component } from 'react'\nimport Formulario from './formulario'\nimport BotonBorrar from './botonborrar'\nimport BotonCompletar from './botoncompletar'\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport moment from 'moment-timezone';\n\nclass Tareas extends Component {\n\n    renderTareas = () => { \n        return this.props.listaDeTareas.map(\n            ({id_tarea, titulo, id_categoria, fecha_creacion}) => \n            <label className=\"tarea\" key={id_tarea}> \n                <BotonCompletar idTarea={id_tarea} actualizarRoot={this.props.actualizarRoot}/> \n                {titulo} \n                <button className=\"fecha\">{id_categoria}</button>\n                <button className=\"fecha\">\n                    <Moment format='DD-MM-YY LT'>{fecha_creacion}</Moment>\n                </button>\n                <BotonBorrar idTarea={id_tarea} actualizarRoot={this.props.actualizarRoot}/>\n            </label>\n        )\n    }\n    render() { \n        return ( \n            <div>\n                <Formulario listaDeTareas={this.props.listaDeTareas} obtenerTareas={this.props.obtenerTareas}/>\n                <div className=\"tareas-container\">\n                {this.props.listaDeTareas.length === 0 && <div className=\"tarea\">Márcate un propósito</div>}\n                {this.renderTareas()}\n                </div>\n                <button onClick={this.groupTareas}>tareas nuevas</button>\n            </div>\n        )\n    }\n}\n \nexport default Tareas ","import React, { Component } from 'react'\nimport 'moment-timezone';\nimport moment from 'moment-timezone';\n\nclass Completas extends Component {\n\n    state = { \n        tareas: [],\n        id_tarea: null,\n        titulo: null,\n        fecha_creacion: null,\n        fecha_finalizacion: null\n    }\n\n    componentDidMount() {\n        this.getTareasCompletadas()\n    }\n    getTareasCompletadas = _ => {\n        fetch(`http://`+process.env.REACT_APP_HOST+`:`+process.env.REACT_APP_SERVER_PORT+`/api/completadas`)\n        .then(respuesta => respuesta.json())\n        .then(respuesta => this.setState({tareas: respuesta.data}))\n        .catch(err => console.log(err))\n        console.log('getTareasCompletadas',this.state.tareas)\n    }\n    getTiempoTranscurrido = (inicio, fin) => {\n        let finicio = moment(inicio)\n        let ffin = moment(fin)\n        let tiempo = ''\n\n        ffin.diff(finicio, 'minutes') > 59 \n        ? tiempo = ffin.diff(finicio, 'hours') + \" horas\"\n        : tiempo = ffin.diff(finicio, 'minutes') + \" minutos\"\n        \n        return tiempo\n    }\n\n    renderTareas = () => { \n        return this.state.tareas.map(\n            ({id_tarea, titulo, fecha_creacion, fecha_finalizacion}) => \n            <label className=\"tarea\" key={id_tarea}>\n            {titulo}\n            <button className=\"fecha\">({this.getTiempoTranscurrido(fecha_creacion,fecha_finalizacion)})</button>\n            </label>\n        )\n    }\n    render() { \n        return ( \n            <div className=\"tareas-container\">\n                <button onClick={this.groupTareas}>Conseguir mes</button>\n                {this.state.tareas.length === 0 && <div className=\"tarea\"> Aún no completaste ninguna tarea</div>}\n                {this.renderTareas()}\n            </div>\n        )\n    }\n}\n \nexport default Completas ","import React from 'react'\nimport './App.css'\nimport Tareas from './components/tareas'\nimport Completas from './components/completas';\nimport { BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      tareas: [],\n      tarea: {\n        titulo: '',\n        fecha_creacion: null,\n        estado: '',\n        categoria: ''\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.getTareas()\n    document.title = \"Lista de tareas\"\n  }\n\n  //Llamar a Endpoint para conseguir todas las tareas\n  getTareas = _ => {\n    fetch(`http://`+process.env.REACT_APP_HOST+`:`+process.env.REACT_APP_SERVER_PORT+`/api/tareas`)\n    .then(respuesta => respuesta.json())\n    .then(respuesta => this.setState({tareas: respuesta.data}))\n    .catch(err => console.log(err))\n    console.log('getTareas a endpoint')\n  }\n  \n  actualizarRoot = _ => {\n    this.getTareas()\n  }\n\n  render(){\n    const {tareas, tarea} = this.state \n    return (\n      <Router>\n        <div className=\"link-container\">\n          <li className=\"link\"><Link to=\"/\">INICIO</Link></li>\n          <li className=\"link\"><Link to=\"/completadas\" style={{textDecoration: 'none'}}>TAREAS COMPLETADAS</Link></li>\n        </div>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <div className=\"App\" style={{backgroundColor: \"#\"+ Math.random().toString(16).slice(2, 8)}}>\n              <Tareas listaDeTareas={this.state.tareas} obtenerTareas={this.getTareas} actualizarRoot={this.actualizarRoot}/>\n            </div>\n          </Route>\n          <Route path=\"/completadas\">\n            <div className=\"App\" style={{backgroundColor: \"#\"+ Math.random().toString(16).slice(2, 8)}}>\n              <Completas/>\n            </div>\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App className=\"root\"/>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}