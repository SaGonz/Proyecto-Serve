{"version":3,"sources":["components/formulario.jsx","components/botonborrar.jsx","components/botoncompletar.jsx","components/tareas.jsx","components/completas.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","props","addTarea","_","fetch","state","valor","then","obtenerTareas","catch","err","console","error","log","fecha_creacion","handleChange","bind","handleSubmit","event","this","setState","target","value","preventDefault","onSubmit","type","onChange","className","Component","BotonBorrar","handleBorrar","e","idTarea","borrarTarea","idBorrar","callbackPadre","actualizarRoot","onClick","BotonCompletar","handleClick","Tareas","renderTareas","listaDeTareas","map","id_tarea","titulo","key","format","length","Completas","tareas","fecha_finalizacion","getTareasCompletadas","respuesta","json","data","id_tareas","diff","App","getTareas","tarea","estado","categoria","to","style","textDecoration","Path","backgroundColor","Math","random","toString","slice","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8SAsCeA,E,YAnCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAiBVC,SAAW,SAAAC,GACPC,MAAM,iDAA6F,EAAKC,MAAMC,QAC7GC,KAAK,EAAKN,MAAMO,iBAChBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAC5BC,QAAQE,IAAI,kBApBZ,EAAKR,MAAQ,CAACC,MAAO,GAAIQ,eAAgB,IAEzC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALL,E,0EAQNE,GACTC,KAAKC,SAAS,CAACd,MAAOY,EAAMG,OAAOC,QACnCX,QAAQE,IAAIK,EAAMG,OAAOC,S,mCAEhBJ,GACTA,EAAMK,iBACNZ,QAAQE,IAAI,UACZM,KAAKjB,a,+BAWL,OACI,0BAAMsB,SAAUL,KAAKF,cACjB,2BAAOQ,KAAK,OAAOH,MAAOH,KAAKd,MAAMC,MAAOoB,SAAUP,KAAKJ,eAC3D,2BAAOU,KAAK,SAASE,UAAU,cAAcL,MAAM,iB,GA9B1CM,aCuBVC,E,2MArBXC,aAAe,SAACC,GACZpB,QAAQE,IAAI,+BAAgC,EAAKZ,MAAM+B,SACvD,EAAKC,YAAY,EAAKhC,MAAM+B,U,EAEhCC,YAAc,SAACC,GACXvB,QAAQE,IAAI,0BAA0BqB,GACtC9B,MAAM,mDAA+F8B,IACpG3B,KAAK,EAAK4B,eACV1B,OAAM,SAAAC,GAAG,OAAIC,QAAQE,IAAIH,O,EAE9ByB,cAAgB,SAAAhC,GACZ,EAAKF,MAAMmC,kB,wEAIX,OACI,4BAAQT,UAAU,eAAeU,QAASlB,KAAKW,cAA/C,S,GAlBcF,aCyBXU,G,iNAtBXC,YAAc,WACV5B,QAAQE,IAAI,mCAAmC,EAAKZ,MAAM+B,SAC1D5B,MAAM,sDAAkG,EAAKH,MAAM+B,UAClHzB,KAAK,EAAK4B,eACXxB,QAAQE,IAAI,+B,EAGhBE,aAAe,a,EAIfoB,cAAgB,WACZ,EAAKlC,MAAMmC,kB,wEAIX,OACI,2BAAOT,UAAU,kBAAkBF,KAAK,WAAWY,QAASlB,KAAKoB,YAAab,SAAUP,KAAKJ,mB,GAnB5Ea,c,iBCiCdY,G,iNA3BXC,aAAe,WACX,OAAO,EAAKxC,MAAMyC,cAAcC,KAC5B,gBAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,OAAQ/B,EAApB,EAAoBA,eAApB,OACA,2BAAOa,UAAU,QAAQmB,IAAKF,GAC1B,kBAAC,EAAD,CAAgBZ,QAASY,EAAUR,eAAgB,EAAKnC,MAAMmC,iBAC7DS,EACD,4BAAQlB,UAAU,SACd,kBAAC,IAAD,CAAQoB,OAAO,eAAejC,IAElC,kBAAC,EAAD,CAAakB,QAASY,EAAUR,eAAgB,EAAKnC,MAAMmC,sB,wEAKnE,OACI,6BACI,kBAAC,EAAD,CAAYM,cAAevB,KAAKlB,MAAMyC,cAAelC,cAAeW,KAAKlB,MAAMO,gBAC/E,yBAAKmB,UAAU,oBACsB,IAApCR,KAAKlB,MAAMyC,cAAcM,QAAgB,yBAAKrB,UAAU,SAAf,8BACzCR,KAAKsB,qB,GArBDb,cCmCNqB,E,2MArCX5C,MAAQ,CACJ6C,OAAQ,GACRN,SAAU,KACVC,OAAQ,KACR/B,eAAgB,KAChBqC,mBAAoB,M,EAMxBC,qBAAuB,SAAAjD,GACnBC,MAAM,uCACLG,MAAK,SAAA8C,GAAS,OAAIA,EAAUC,UAC5B/C,MAAK,SAAA8C,GAAS,OAAI,EAAKjC,SAAS,CAAC8B,OAAQG,EAAUE,UACnD9C,OAAM,SAAAC,GAAG,OAAIC,QAAQE,IAAIH,MAC1BC,QAAQE,IAAI,uBAAuB,EAAKR,MAAM6C,S,EAGlDX,YAAc,SAAApC,GACVQ,QAAQE,IAAI,wB,EAGhB4B,aAAe,WACX,OAAO,EAAKpC,MAAM6C,OAAOP,KAAI,gBAAEa,EAAF,EAAEA,UAAWX,EAAb,EAAaA,OAAQ/B,EAArB,EAAqBA,eAAgBqC,EAArC,EAAqCA,mBAArC,OAC7B,yBAAKxB,UAAU,QAAQmB,IAAKU,GAAYX,EAAxC,KAAkD/B,EAAe2C,KAAKN,EAAmB,QAAO,GAAhG,iB,mFAhBAhC,KAAKiC,yB,+BAmBL,OACI,6BACkC,IAA7BjC,KAAKd,MAAM6C,OAAOF,QAAgB,sCAClC7B,KAAKsB,oB,GAjCEb,a,gBC8DT8B,E,YAzDb,WAAYzD,GAAQ,IAAD,8BACjB,4CAAMA,KAiBR0D,UAAY,SAAAxD,GACVC,MAAM,gCACLG,MAAK,SAAA8C,GAAS,OAAIA,EAAUC,UAC5B/C,MAAK,SAAA8C,GAAS,OAAI,EAAKjC,SAAS,CAAC8B,OAAQG,EAAUE,UACnD9C,OAAM,SAAAC,GAAG,OAAIC,QAAQE,IAAIH,MAC1BC,QAAQE,IAAI,yBAvBK,EA0BnBuB,eAAiB,SAAAjC,GACf,EAAKwD,aAzBL,EAAKtD,MAAQ,CACX6C,OAAQ,GACRU,MAAO,CACLf,OAAQ,GACR/B,eAAgB,KAChB+C,OAAQ,GACRC,UAAW,KARE,E,iFAcjB3C,KAAKwC,c,+BAgBE,IAAD,EACkBxC,KAAKd,MADvB,EACC6C,OADD,EACSU,MACf,OACE,kBAAC,IAAD,KACE,yBAAKjC,UAAU,kBACb,wBAAIA,UAAU,QAAO,kBAAC,IAAD,CAAMoC,GAAG,KAAT,WACrB,wBAAIpC,UAAU,QAAO,kBAAC,IAAD,CAAMoC,GAAG,aAAaC,MAAO,CAACC,eAAgB,SAA9C,wBAGvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,yBAAKvC,UAAU,MAAMqC,MAAO,CAACG,gBAAiB,IAAKC,KAAKC,SAASC,SAAS,IAAIC,MAAM,EAAG,KACrF,kBAAC,EAAD,CAAQ7B,cAAevB,KAAKd,MAAM6C,OAAQ1C,cAAeW,KAAKwC,UAAWvB,eAAgBjB,KAAKiB,mBAGlG,kBAAC,IAAD,CAAO8B,KAAK,kBACV,yBAAKvC,UAAU,MAAMqC,MAAO,CAACG,gBAAiB,IAAKC,KAAKC,SAASC,SAAS,IAAIC,MAAM,EAAG,KACrF,kBAAC,EAAD,c,GAjDIC,IAAM5C,WCMJ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7E,MAAK,SAAA8E,GACJA,EAAaC,gBAEd7E,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM2E,c","file":"static/js/main.803e7e3d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Formulario extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {valor: '', fecha_creacion: ''}\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({valor: event.target.value})\n        console.log(event.target.value)\n    }\n    handleSubmit(event) {\n        event.preventDefault()\n        console.log('enviar')\n        this.addTarea()\n    }\n\n    addTarea = _ => {\n        fetch(`http://`+process.env.REACT_APP_HOST+`:`+process.env.REACT_APP_SERVER_PORT+`/llenar?titulo=${this.state.valor}`)\n        .then(this.props.obtenerTareas())\n        .catch(err => console.error(err))\n        console.log('tarea enviada')\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" value={this.state.valor} onChange={this.handleChange}/>\n                <input type=\"submit\" className=\"boton-envio\" value=\"Iniciar\"/>\n            </form>\n        )\n    }\n}\n\nexport default Formulario","import React, { Component } from 'react'\n\nclass BotonBorrar extends Component {\n\n    handleBorrar = (e) => {\n        console.log('quieres borrar desde cliente', this.props.idTarea)\n        this.borrarTarea(this.props.idTarea)\n    }\n    borrarTarea = (idBorrar) => {\n        console.log('borrartareapeticion hit',idBorrar)\n        fetch(`http://`+process.env.REACT_APP_HOST+`:`+process.env.REACT_APP_SERVER_PORT+`/borrar?id_tarea=${idBorrar}`)\n        .then(this.callbackPadre)\n        .catch(err => console.log(err))\n    }\n    callbackPadre = _ => {\n        this.props.actualizarRoot()\n    }\n\n    render() {\n        return(\n            <button className=\"boton-borrar\" onClick={this.handleBorrar}>x</button>\n        )\n    }\n}\n\nexport default BotonBorrar;","import React, { Component } from 'react';\nimport useSound from 'use-sound';\n\nclass BotonCompletar extends Component {\n\n    handleClick = () => {\n        console.log(\"has decidido completar una tarea\",this.props.idTarea)\n        fetch(`http://`+process.env.REACT_APP_HOST+`:`+process.env.REACT_APP_SERVER_PORT+`/completar?id_tarea=${this.props.idTarea}`)\n        .then(this.callbackPadre)\n        console.log('has mandado la petición')\n        \n    }\n    handleChange = () => {\n\n    }\n\n    callbackPadre = () => {\n        this.props.actualizarRoot()\n    }\n\n    render() {\n        return (\n            <input className=\"boton-completar\" type=\"checkbox\" onClick={this.handleClick} onChange={this.handleChange}/>\n        )\n    }\n}\n\nexport default BotonCompletar;","import React, { Component } from 'react'\nimport Formulario from './formulario'\nimport BotonBorrar from './botonborrar'\nimport BotonCompletar from './botoncompletar'\nimport Moment from 'react-moment';\nimport 'moment-timezone';\n\nclass Tareas extends Component {\n\n    renderTareas = () => { \n        return this.props.listaDeTareas.map(\n            ({id_tarea, titulo, fecha_creacion}) => \n            <label className=\"tarea\" key={id_tarea}> \n                <BotonCompletar idTarea={id_tarea} actualizarRoot={this.props.actualizarRoot}/> \n                {titulo} \n                <button className=\"fecha\">\n                    <Moment format='DD-MM-YY LT'>{fecha_creacion}</Moment>\n                </button>\n                <BotonBorrar idTarea={id_tarea} actualizarRoot={this.props.actualizarRoot}/>\n            </label>\n        )\n    }\n    render() { \n        return ( \n            <div>\n                <Formulario listaDeTareas={this.props.listaDeTareas} obtenerTareas={this.props.obtenerTareas}/>\n                <div className=\"tareas-container\">\n                {this.props.listaDeTareas.length === 0 && <div className=\"tarea\">Márcate un propósito</div>}\n                {this.renderTareas()}\n                </div>\n                \n            </div>\n        )\n    }\n}\n \nexport default Tareas ","import React, { Component } from 'react'\nimport 'moment-timezone';\n\nclass Completas extends Component {\n\n    state = { \n        tareas: [],\n        id_tarea: null,\n        titulo: null,\n        fecha_creacion: null,\n        fecha_finalizacion: null\n    }\n\n    componentDidMount() {\n        this.getTareasCompletadas()\n    }\n    getTareasCompletadas = _ => {\n        fetch(`http://`+process.env.REACT_APP_HOST+`:`+process.env.REACT_APP_SERVER_PORT+`/r-completadas`)\n        .then(respuesta => respuesta.json())\n        .then(respuesta => this.setState({tareas: respuesta.data}))\n        .catch(err => console.log(err))\n        console.log('getTareasCompletadas',this.state.tareas)\n    }\n\n    handleClick = _ => {\n        console.log('click a completadas')\n    }\n\n    renderTareas = () => { \n        return this.state.tareas.map(({id_tareas, titulo, fecha_creacion, fecha_finalizacion}) => \n        <div className=\"tarea\" key={id_tareas}>{titulo} ({fecha_creacion.diff(fecha_finalizacion,'days',true)} días)</div>)\n    }\n    render() { \n        return ( \n            <div>\n                {this.state.tareas.length === 0 && 'Aún no completaste ninguna tarea'}\n                {this.renderTareas()}\n            </div>\n        )\n    }\n}\n \nexport default Completas ","import React from 'react'\nimport './App.css'\nimport Tareas from './components/tareas'\nimport Completas from './components/completas';\nimport { BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      tareas: [],\n      tarea: {\n        titulo: '',\n        fecha_creacion: null,\n        estado: '',\n        categoria: ''\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.getTareas()\n  }\n\n  //Llamar a Endpoint para conseguir todas las tareas\n  getTareas = _ => {\n    fetch(`http://`+process.env.REACT_APP_HOST+`:`+process.env.REACT_APP_SERVER_PORT+`/tareas`)\n    .then(respuesta => respuesta.json())\n    .then(respuesta => this.setState({tareas: respuesta.data}))\n    .catch(err => console.log(err))\n    console.log('getTareas a endpoint')\n  }\n  \n  actualizarRoot = _ => {\n    this.getTareas()\n  }\n\n  render(){\n    const {tareas, tarea} = this.state \n    return (\n      <Router>\n        <div className=\"link-container\">\n          <li className=\"link\"><Link to=\"/\">Inicio</Link></li>\n          <li className=\"link\"><Link to=\"/completas\" style={{textDecoration: 'none'}}>Tareas completadas</Link></li>\n        </div>\n\n        <Switch>\n          <Route Path=\"/\">\n            <div className=\"App\" style={{backgroundColor: \"#\"+ Math.random().toString(16).slice(2, 8)}}>\n              <Tareas listaDeTareas={this.state.tareas} obtenerTareas={this.getTareas} actualizarRoot={this.actualizarRoot}/>\n            </div>\n          </Route>\n          <Route Path=\"/r-completadas\">\n            <div className=\"App\" style={{backgroundColor: \"#\"+ Math.random().toString(16).slice(2, 8)}}>\n              <Completas/>\n            </div>\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}